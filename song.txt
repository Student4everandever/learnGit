sword and spear
wall of shields
standing strong
on this their chosen battlefield




private void homework() {
        List<String> names = new ArrayList<>();
        names.add("Ivan");
        names.add("Dan");
        names.add("Peter");
        names.add("Roland");
        names.add("Tom");

        System.out.println(names);

        List<String> result = names.stream()
                .filter(x -> (names.indexOf(x) % 2 == 0))
                .map(s -> names.indexOf(s) + 1 + "." + s)
                .collect(Collectors.toList());

        System.out.println(result);

        //Collections.reverse(names);

        List<String> result2 = names.stream()
                .map(String::toUpperCase)
                .sorted(Comparator.reverseOrder())
                .collect(Collectors.toList());

        System.out.println(result2);

        List<String> collection = Arrays.asList ("1, 2, 0", "4, 5");

        List<String> result3 = collection.stream()
                .flatMap(Stream::of)
                .collect(Collectors.toList());

        System.out.println(result3);

    }
    
        public static <T> Stream<T> zip(Stream<T> first, Stream<T> second) {
        Stream.Builder<T> sb = Stream.builder();

        Set<Object> result = IntStream
                .range(0, (int) Math.min(first.count(), second.count()))
                .mapToObj(i -> {sb.accept(first.collect(Collectors.toList()).get(i));
                               sb.accept(second.collect(Collectors.toList()).get(i));
                return sb;})
                .collect(Collectors.toCollection(TreeSet::new));

        return sb.build();
        }    
    
    
     String names = "Alex Anna Dmitri Andrey Oksana";

        List<String> str = Stream.of(names.split(" "))
                .filter(x -> x.length() > 5)
                .map(x -> x.toUpperCase())
                .collect(Collectors.toList());

        System.out.println(str);
    
